version: '3.8'
services:
  zookeeper:
    image: bitnami/zookeeper:3.7.2
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:3.6.1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_CREATE_TOPICS=orders:1:1,notifications:1:1
      - KAFKA_BROKER=kafka:9092
    volumes:
      - kafka_data:/bitnami/kafka
      - ./scripts/wait-for-zookeeper.sh:/wait-for-zookeeper.sh
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - app-network

  mongo:
    image: mongo:4.4.6
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    command: mongod --bind_ip_all
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "27017"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  shared-lib:
    build: 
      context: ./backend/shared
      dockerfile: Dockerfile
    image: shared-lib:latest

  user-service:
    build: 
      context: ./backend/user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGO_URI=mongodb://mongo:27017/user-service
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./backend/user-service:/app
      - user_service_node_modules:/app/node_modules
      - shared_lib:/app/node_modules/shared
    depends_on:
      mongo:
        condition: service_started
      kafka:
        condition: service_healthy
      shared-lib:
        condition: service_completed_successfully
    networks:
      - app-network

  product-service:
    build: 
      context: ./backend/product-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - MONGO_URI=mongodb://mongo:27017/product-service
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./backend/product-service:/app
      - product_service_node_modules:/app/node_modules
      - shared_lib:/app/node_modules/shared
    depends_on:
      mongo:
        condition: service_started
      kafka:
        condition: service_healthy
      shared-lib:
        condition: service_completed_successfully
    networks:
      - app-network

  order-service:
    build: 
      context: ./backend/order-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGO_URI=mongodb://mongo:27017/order-service
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./backend/order-service:/app
      - order_service_node_modules:/app/node_modules
      - shared_lib:/app/node_modules/shared
    depends_on:
      mongo:
        condition: service_started
      kafka:
        condition: service_healthy
      shared-lib:
        condition: service_completed_successfully
    networks:
      - app-network

  notification-service:
    build: 
      context: ./backend/notification-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGO_URI=mongodb://mongo:27017/notification-service
      - ORDER_SERVICE_MONGO_URI=mongodb://mongo:27017/order-service
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./backend/notification-service:/app
      - notification_service_node_modules:/app/node_modules
      - shared_lib:/app/node_modules/shared
    depends_on:
      mongo:
        condition: service_started
      kafka:
        condition: service_healthy
      shared-lib:
        condition: service_completed_successfully
    networks:
      - app-network

  api-gateway:
    build: 
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3004
      - ORDER_SERVICE_URL=http://order-service:3002
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
    volumes:
      - ./api-gateway:/app
      - api_gateway_node_modules:/app/node_modules
      - shared_lib:/app/node_modules/shared
    depends_on:
      - user-service
      - product-service
      - order-service
      - notification-service
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  kafka_data:
  zookeeper_data:
  shared_lib:
  user_service_node_modules:
  product_service_node_modules:
  order_service_node_modules:
  notification_service_node_modules:
  api_gateway_node_modules: